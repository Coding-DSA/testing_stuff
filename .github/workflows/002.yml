on:
  push:
  workflow_dispatch:

jobs:
  run-script:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Files After Checkout
        run: ls -R  # List files to confirm PythonFolder/azure_cosmos_db_onboarding.csv exists

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests azure-identity azure-mgmt-purview azure-mgmt-resource azure-purview-catalog

      - name: Create Sample CSV File (For Testing, If Missing)
        run: |
          if [ ! -f "PythonFolder/azure_cosmos_db_onboarding.csv" ]; then
            mkdir -p PythonFolder
            echo "id,DatasourceName,DatabaseName,Kind,Endpoint" > PythonFolder/azure_cosmos_db_onboarding.csv
            echo "1,TestSource,testdb,AzureCosmosDB,https://example.com" >> PythonFolder/azure_cosmos_db_onboarding.csv
          fi

      - name: Read Parameter File and Onboard New Data Sources
        id: read_csv_python
        run: |
          python - <<EOF
          import csv, os, json
          from base64 import b64encode

          file_path = "PythonFolder/azure_cosmos_db_onboarding.csv"
          if not os.path.exists(file_path):
              raise FileNotFoundError(f"File not found: {file_path}")

          with open(file_path, "r") as file:
              reader = csv.DictReader(file)
              data_rows = list(reader)

          filtered_data = [row for row in data_rows if row["DatabaseName"] not in ["ExistingDB1", "ExistingDB2"]]

          json_data = json.dumps(filtered_data)
          b64_json = b64encode(json_data.encode()).decode()

          with open("task_data.json", "w") as f:
              f.write(b64_json)

          print(b64_json)
          EOF

          echo "filtered_data=$(cat task_data.json)" >> $GITHUB_ENV

    outputs:
      filtered_data: ${{ env.filtered_data }}

  processed-data:
    needs: run-script
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Process Filtered Data
        run: |
          echo "Processing task data..."
          task_data="${{ needs.run-script.outputs.filtered_data }}"

          if [[ -z "$task_data" ]]; then
            echo "Error: No data received!"
            exit 1
          fi

          echo "$task_data" | python - <<EOF
          import sys, json
          from base64 import b64decode

          encoded_data = sys.stdin.read().strip()
          if not encoded_data:
              print("Error: Received empty data")
              sys.exit(1)

          try:
              decoded_json = json.loads(b64decode(encoded_data).decode())
          except Exception as e:
              print(f"JSON decoding error: {e}")
              sys.exit(1)

          for item in decoded_json:
              print("Deploying data source:")
              for key, value in item.items():
                  print(f"- {key}: {value}")
          EOF
